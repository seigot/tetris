name: test-windows
on: 
# push/ullrequest時にci実行
    push:
      branches: [master]
    pull_request:
        paths-ignore:
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.0.2


      - name: Build with MSBuild
        shell: powershell
          - '.gitignore'
          - 'LICENSE'
          if (${{ matrix.arch }} -eq "x64") {
            $msbuildPlatform = "x64"
          } else {
          - '**.md'
            $msbuildPlatform = "Win32"
          }

          msbuild -version

# 環境変数
env:
  BRANCH_NAME : "master"

jobs:
  build:
    name: MSBuild
    runs-on: windows-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10'] # [3.5, 3.6, 3.7, 3.8]

    steps:
      - name: checkout repository
        uses: actions/checkout@v3
        with:
          path: target_dir
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        shell: powershell
        run: |
          git --version
          python --version
          python -m pip install --upgrade pip

      - name: tetris_sample
      # tetrisが動くかどうか確認(SCOREが入ればOK)
        shell: powershell
        working-directory: target_dir
        run: |
          # QT display off
          $Env:QT_QPA_PLATFORM = 'offscreen'
          # run tetris
          if( Test-Path .\requirements.txt ){ pip install -r requirements.txt }
          python start.py -m sample -t 3 -f $HOME/result.json

      - name: tetris_DQN_sample
        working-directory: target_dir
        shell: powershell
        run: |
          # QT display off
          $Env:QT_QPA_PLATFORM = 'offscreen'
          # run tetris
          if( Test-Path .\requirements.txt ){ pip install -r requirements.txt }
          if( Test-Path .\requirements.pytorch.txt ){ pip install -r requirements.pytorch.txt }
          python start.py -m predict_sample -l 2 -t 5 --predict_weight weight/DQN/sample_weight.pt -f $HOME/result_dqn.json

      - name: tetris_MLP_sample
        working-directory: target_dir
        shell: powershell
        run: |
          # QT display off
          $Env:QT_QPA_PLATFORM = 'offscreen'
          # run tetris
          if( Test-Path .\requirements.txt ){ pip install -r requirements.txt }
          if( Test-Path .\requirements.pytorch.txt ){ pip install -r requirements.pytorch.txt }
          python start.py -m predict_sample2 -l 2 -t 5 --predict_weight weight/MLP/sample_weight.pt -f $HOME/result_mlp.json

